# Шифр "Залізнична огорожа"

# Реалізуйте дві функції для кодування та декодування рядка за допомогою шифру "Залізнична огорожа".
#  Цей шифр працює так: кожен символ розміщується по діагоналі вниз уздовж набору "рейок". Коли ви досягаєте нижнього ряду,
# напрям змінюється, і рух триває по діагоналі вгору, доки не досягнете верхньої рейки. Процес повторюється до кінця рядка. 
# Закодований рядок отримується шляхом читання кожного ряду зліва направо.

# Наприклад, рядок "МАМАКУПІМНЕСНЕЖІНКУ" можна представити у системі з трьома рейками так:
# М       К       М       Н       Н
#   А   А   У   І   Н   С   E   І   К
#      М       П        Е       Ж      У
# Закодований рядок:
# МКМННААУІНСЕІКМПЕЖУ
# Завдання:
# •	Напишіть функцію, яка приймає два аргументи: рядок і кількість рейок. Вона повинна повертати закодований рядок.
# •	Напишіть другу функцію, яка приймає два аргументи: закодований рядок і кількість рейок. Вона повинна повертати розшифрований рядок.
# Додаткові умови:
# •	Кількість рейок завжди буде не меншою за 2.
# •	Якщо переданий порожній рядок, функція має повернути порожній рядок.
# •	Не видаляйте розділові знаки та пробіли – вони є частиною рядка.

# def rail_fence_encode(text: str, rails: int) -> str:



# def rail_fence_decode(encoded_text: str, rails: int) -> str:

def test_rail_fence_cipher():
    print(rail_fence_encode("МАМАКУПІМНЕСНЕЖІНКУ", 3))  # Expected: "МКМННААУІНСЕІКМПЕЖУ"
    print(rail_fence_decode("МКМННААУІНСЕІКМПЕЖУ", 3))  # Expected: "МАМАКУПІМНЕСНЕЖІНКУ"

    print(rail_fence_encode("HELLO WORLD", 3))  # Expected: "HOLELWRDLO"
    print(rail_fence_decode("HOLELWRDLO", 3))  # Expected: "HELLO WORLD"

    print(rail_fence_encode("", 3))  # Expected: ""
    print(rail_fence_decode("", 3))  # Expected: ""

    print(rail_fence_encode("TESTING RAIL FENCE", 4))  # Expected: "TIE EATSGNLFNCRS"
    print(rail_fence_decode("TIE EATSGNLFNCRS", 4))  # Expected: "TESTING RAIL FENCE"

test_rail_fence_cipher()
